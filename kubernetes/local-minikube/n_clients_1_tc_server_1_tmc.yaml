# Copyright © 2018 Software AG, Darmstadt, Germany and/or its licensors
#
# SPDX-License-Identifier: Apache-2.0
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


apiVersion: v1
kind: ConfigMap
metadata:
  name: tc-config
data:
  tc-config.xml: |
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <!--
      ~ Copyright © 2018 Software AG, Darmstadt, Germany and/or its licensors
      ~
      ~ SPDX-License-Identifier: Apache-2.0
      ~
      ~ Licensed under the Apache License, Version 2.0 (the "License");
      ~ you may not use this file except in compliance with the License.
      ~ You may obtain a copy of the License at
      ~
      ~      http://www.apache.org/licenses/LICENSE-2.0
      ~
      ~ Unless required by applicable law or agreed to in writing, software
      ~ distributed under the License is distributed on an "AS IS" BASIS,
      ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      ~ See the License for the specific language governing permissions and
      ~ limitations under the License.
      -->

    <tc-config xmlns="http://www.terracotta.org/config">
        <plugins>
            <config>
                <ohr:offheap-resources xmlns:data="http://www.terracottatech.com/config/data-roots" xmlns:ohr="http://www.terracotta.org/config/offheap-resource">
                    <ohr:resource name="offheap-1" unit="MB">512</ohr:resource>
                    <ohr:resource name="offheap-2" unit="MB">256</ohr:resource>
                </ohr:offheap-resources>
            </config>
            <config>
                <data:data-directories xmlns:data="http://www.terracottatech.com/config/data-roots" xmlns:ohr="http://www.terracotta.org/config/offheap-resource">
                    <data:directory name="dataroot-1" use-for-platform="true">/data/dataroots/dataroot-1</data:directory>
                    <data:directory name="dataroot-2">/data/dataroots/dataroot-2</data:directory>
                </data:data-directories>
            </config>
            <service>
                <backup-restore xmlns="http://www.terracottatech.com/config/backup-restore">
                    <backup-location path="/data/backups/" />
                </backup-restore>
            </service>
        </plugins>
        <servers>
            <server host="terracotta-0.terracotta" name="terracotta-0">
                <tsa-port>9410</tsa-port>
                <tsa-group-port>9430</tsa-group-port>
            </server>
            <client-reconnect-window>120</client-reconnect-window>
        </servers>
    </tc-config>


---

apiVersion: batch/v1
kind: Job
metadata:
  name: cluster-tool
spec:
  template:
    metadata:
      name: cluster-tool
    spec:
      containers:
      - name: cluster-tool
        image: store/softwareag/terracotta-cluster-tool:10.3
        imagePullPolicy: Always #ensure the node will always try to pull from the registry
        args: ["configure", "-n", "MyCluster", "/configs/tc-config.xml"]
        env:
        - name: ACCEPT_EULA
          value: "Y"
        volumeMounts:
        - name: config-volume
          mountPath: /configs
        - name: license-volume
          mountPath: /licenses
      volumes:
      - name: config-volume
        configMap:
          name: tc-config
      - name: license-volume
        configMap:
          name: license
      restartPolicy: OnFailure
      imagePullSecrets:
      - name: regcred

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: store-client
  name: store-client-deployment
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: store-client
    spec:
      containers:
      - image: store/softwareag/sample-tcstore-client:10.3
        imagePullPolicy: Always #ensure the node will always try to pull from the registry
        name: store-client
        env:
        - name: ACCEPT_EULA
          value: "Y"
      imagePullSecrets:
      - name: regcred
  selector:
    matchLabels:
      app: store-client

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: caching-client
  name: caching-client-deployment
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: caching-client
    spec:
      containers:
      - image: store/softwareag/sample-ehcache-client:10.3
        imagePullPolicy: Always #ensure the node will always try to pull from the registry
        name: caching-client
        env:
        - name: ACCEPT_EULA
          value: "Y"
      imagePullSecrets:
      - name: regcred
  selector:
    matchLabels:
      app: caching-client
---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: tmc
  name: tmc
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: tmc
    spec:
      containers:
      - image: store/softwareag/tmc:10.3
        imagePullPolicy: Always #ensure the node will always try to pull from the registry
        name: tmc
        env:
        - name: ACCEPT_EULA
          value: "Y"
        ports:
        - containerPort: 9480
        volumeMounts:
        - name: tmcdata
          mountPath: /data/tmc/
      volumes:
        - name: tmcdata
          hostPath:
            path: /home/docker/tmcdata
      restartPolicy: Always
      imagePullSecrets:
      - name: regcred
  selector:
    matchLabels:
      app: tmc
  serviceName: tmc-internal

---

apiVersion: v1
kind: Service
metadata:
  name: tmc
  labels:
    app: tmc
spec:
  ports:
  - name: tmc-port
    port: 9480
  type: NodePort
  selector:
    app: tmc

---

apiVersion: v1
kind: Service
metadata:
  name: tmc-internal
  labels:
    app: tmc
spec:
  ports:
  - name: tmc-port
    port: 9480
  clusterIP: None
  selector:
    app: tmc

---

apiVersion: v1
kind: Service
metadata:
  name: terracotta
  labels:
    app: terracotta
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  ports:
  - name: terracotta-port
    port: 9410
  - name: sync-port
    port: 9430
  clusterIP: None
  selector:
    app: terracotta

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: terracotta
  name: terracotta
spec:
  selector:
    matchLabels:
      app: terracotta
  serviceName: terracotta
  # replica set definition
  replicas: 1
  template:
    metadata:
      labels:
        app: terracotta
    spec:
      # pod definition
      containers:
      - name: terracotta
        image: store/softwareag/terracotta-server:10.3
        imagePullPolicy: Always #ensure the node will always try to pull from the registry
        resources:
          requests:
            memory: 2Gi
        command: ["bin/start-tc-server.sh"]
        args: ["-f", "/configs/tc-config.xml", "-n", "$(POD_NAME)"]
        ports:
        - containerPort: 9410
          name: terracotta-port
        - containerPort: 9430
          name: sync-port
        env:
        - name: ACCEPT_EULA
          value: "Y"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        volumeMounts:
        - name: dataroots
          mountPath: /data/dataroots
        - name: backups
          mountPath: /data/backups
        - name: config-volume
          mountPath: /configs
      volumes:
        - name: config-volume
          configMap:
            name: tc-config
        - name: dataroots
          hostPath:
            path: /home/docker/dataroots
        - name: backups
          hostPath:
            path: /home/docker/backups
      imagePullSecrets:
      - name: regcred